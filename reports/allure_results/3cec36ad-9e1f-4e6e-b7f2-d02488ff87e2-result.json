{"name": "test_all", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span class=\"menu-text ng-binding\">...</span> is not clickable at point (239, 22). Other element would receive the click: <div class=\"block-ui-overlay\"></div>\n  (Session info: chrome=126.0.6478.127)\nStacktrace:\n\tGetHandleVerifier [0x00007FF6AB9D22C2+60002]\n\t(No symbol) [0x00007FF6AB94CA59]\n\t(No symbol) [0x00007FF6AB807EDA]\n\t(No symbol) [0x00007FF6AB85F39E]\n\t(No symbol) [0x00007FF6AB85CD62]\n\t(No symbol) [0x00007FF6AB85A1FB]\n\t(No symbol) [0x00007FF6AB8593C6]\n\t(No symbol) [0x00007FF6AB84B4D1]\n\t(No symbol) [0x00007FF6AB87C28A]\n\t(No symbol) [0x00007FF6AB84ADF6]\n\t(No symbol) [0x00007FF6AB87C4A0]\n\t(No symbol) [0x00007FF6AB89BCC7]\n\t(No symbol) [0x00007FF6AB87C033]\n\t(No symbol) [0x00007FF6AB849657]\n\t(No symbol) [0x00007FF6AB84A251]\n\tGetHandleVerifier [0x00007FF6ABCE3E2D+3278285]\n\tGetHandleVerifier [0x00007FF6ABD30190+3590448]\n\tGetHandleVerifier [0x00007FF6ABD261D0+3549552]\n\tGetHandleVerifier [0x00007FF6ABA81DE6+779654]\n\t(No symbol) [0x00007FF6AB957ACF]\n\t(No symbol) [0x00007FF6AB952EE4]\n\t(No symbol) [0x00007FF6AB953072]\n\t(No symbol) [0x00007FF6AB942C4F]\n\tBaseThreadInitThunk [0x00007FFF06687344+20]\n\tRtlUserThreadStart [0x00007FFF06E3CC91+33]", "trace": "driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"ee928c53b4be8c6d29321689280ec8f2\")>\n\n    def test_all(driver):\n        login = \"admin@test\"\n        password = 'greenwhite'\n    \n        login_page = LoginPage(driver)\n        login_page.fill_registration_form(login, password)\n        login_page.click_sign_up_button()\n    \n        dashboard_page = DashboartPage(driver)\n        dashboard_page.check_page()\n>       dashboard_page.click_button()\n\ntests\\test_registration.py:32: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npages\\dashboart_page.py:13: in click_button\n    self.click_element(self.SALES_BUTTON)\npages\\base_page.py:17: in click_element\n    element.click()\nvenv\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\nvenv\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:395: in _execute\n    return self._parent.execute(command, params)\nvenv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000239AFA50EE0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...07FF6AB942C4F]\\\\n\\\\tBaseThreadInitThunk [0x00007FFF06687344+20]\\\\n\\\\tRtlUserThreadStart [0x00007FFF06E3CC91+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span class=\"menu-text ng-binding\">...</span> is not clickable at point (239, 22). Other element would receive the click: <div class=\"block-ui-overlay\"></div>\nE         (Session info: chrome=126.0.6478.127)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF6AB9D22C2+60002]\nE       \t(No symbol) [0x00007FF6AB94CA59]\nE       \t(No symbol) [0x00007FF6AB807EDA]\nE       \t(No symbol) [0x00007FF6AB85F39E]\nE       \t(No symbol) [0x00007FF6AB85CD62]\nE       \t(No symbol) [0x00007FF6AB85A1FB]\nE       \t(No symbol) [0x00007FF6AB8593C6]\nE       \t(No symbol) [0x00007FF6AB84B4D1]\nE       \t(No symbol) [0x00007FF6AB87C28A]\nE       \t(No symbol) [0x00007FF6AB84ADF6]\nE       \t(No symbol) [0x00007FF6AB87C4A0]\nE       \t(No symbol) [0x00007FF6AB89BCC7]\nE       \t(No symbol) [0x00007FF6AB87C033]\nE       \t(No symbol) [0x00007FF6AB849657]\nE       \t(No symbol) [0x00007FF6AB84A251]\nE       \tGetHandleVerifier [0x00007FF6ABCE3E2D+3278285]\nE       \tGetHandleVerifier [0x00007FF6ABD30190+3590448]\nE       \tGetHandleVerifier [0x00007FF6ABD261D0+3549552]\nE       \tGetHandleVerifier [0x00007FF6ABA81DE6+779654]\nE       \t(No symbol) [0x00007FF6AB957ACF]\nE       \t(No symbol) [0x00007FF6AB952EE4]\nE       \t(No symbol) [0x00007FF6AB953072]\nE       \t(No symbol) [0x00007FF6AB942C4F]\nE       \tBaseThreadInitThunk [0x00007FFF06687344+20]\nE       \tRtlUserThreadStart [0x00007FFF06E3CC91+33]\n\nvenv\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: ElementClickInterceptedException"}, "start": 1720595058046, "stop": 1720595064591, "uuid": "f76d47ae-df56-4aa4-bc8c-13473403932f", "historyId": "17a3711a560997f91159001749d191e8", "testCaseId": "17a3711a560997f91159001749d191e8", "fullName": "tests.test_registration#test_all", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_registration"}, {"name": "host", "value": "DESKTOP-CGVEQ51"}, {"name": "thread", "value": "14960-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_registration"}]}